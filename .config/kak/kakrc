# ========== Appearance ==========
colorscheme kakoune-plain

# Line numbers + rulers
add-highlighter global/ number-lines -hlcursor -min-digits 4
add-highlighter global/ column 121 PrimarySelection
add-highlighter global/ show-matching

# Word wrapping (80 chars)
add-highlighter global/ wrap -word -indent -width 80

# Optional: indent guides (requires plugin kakoune-indent-guides)
# evaluate-commands %sh{
#   plug "andreyorst/indent-guides.kak"
# }

# Cursorline equivalent (use regex highlight for current line)
hook global WinSetOption filetype=.* %{
  add-highlighter window/ regex '\A.*\z' 0:PrimaryCursor
}

# Modeline (statusline)
# set-option global modelinefmt '[%%val{client} @ %%val{session}] %val{bufname} %%opt{filetype} | L%%val{cursor_line}:C%%val{cursor_char_column} | %%val{mode}'

# ========== Keybindings ==========
# jk â†’ normal mode
map global insert j ': try %{
  exec -draft h
  exec -draft i
  exec -draft <esc>
} catch %{ exec -draft j }<ret>'

map global insert k ': try %{
  exec -draft h
  exec -draft i
  exec -draft <esc>
} catch %{ exec -draft k }<ret>'

# Buffers
map global normal <c-h> ': buffer-previous<ret>'
map global normal <c-l> ': buffer-next<ret>'
map global normal <c-x> ': delete-buffer<ret>'

# File picker (git-aware)
map global normal <c-f> ': findgit '
map global normal <c-e> ': terminal lf<ret>'

# LSP actions
map global normal <c-space> ': lsp-code-actions<ret>'
map global insert <c-space> '<esc>: lsp-code-actions<ret>'

# Git helpers
map global normal <c-y> ': git-link yank<ret>'
map global normal <space> ': enter-user-mode git<ret>'

# Git user-mode
declare-user-mode git
map global git g ': git status<ret>'
map global git a ': git add -p<ret>'
map global git c ': git commit<ret>'
map global git d ': git diff<ret>'
map global git s ': git status<ret>'
map global git p ': git push<ret>'
map global git l ': git pull<ret>'

# ========== Language hooks ==========
# Python
hook -group lsp-filetype-py global WinSetOption filetype=python %{
  set-option buffer formatcmd "black --quiet -"
  set-option buffer lsp_servers %{
    [pylsp]
    command = "pylsp"
  }
}

# JavaScript / TypeScript
hook -group lsp-filetype-js global WinSetOption filetype=(javascript|typescript) %{
  set-option buffer formatcmd "prettier --stdin-filepath=%val{buffile}"
  set-option buffer lsp_servers %{
    [ts]
    command = "typescript-language-server"
    args = ["--stdio"]
  }
}

# HTML / CSS / SCSS / JSON / Markdown / Vue / JSX / TSX / EJS
hook -group lsp-filetype-web global WinSetOption filetype=(html|css|scss|json|markdown|vue|jsx|tsx|ejs) %{
  set-option buffer formatcmd "prettier --stdin-filepath=%val{buffile}"
  set-option buffer lsp_servers %{
    [vscode-html]
    command = "vscode-html-language-server"
    args = ["--stdio"]
  }
}

# Rust
hook -group lsp-filetype-rs global WinSetOption filetype=rust %{
  set-option buffer lsp_servers %{
    [rust-analyzer]
    command = "rust-analyzer"
  }
}

# Lua
hook -group lsp-filetype-lua global WinSetOption filetype=lua %{
  set-option buffer lsp_servers %{
    [lua-language-server]
    command = "lua-language-server"
  }
}

# GraphQL
hook -group lsp-filetype-graphql global WinSetOption filetype=graphql %{
  set-option buffer formatcmd "biome format --stdin-file-path=%val{buffile}"
}

# LaTeX (texlab + ltex)
hook -group lsp-filetype-tex global WinSetOption filetype=latex %{
  set-option buffer lsp_servers %{
    [texlab]
    command = "texlab"
  }
  set-option buffer lsp_servers %{
    [ltex-ls]
    command = "ltex-ls"
  }
}

# ========== Final Setup ==========
# Start kak-lsp automatically
evaluate-commands %sh{
  kak-lsp --kakoune -s $kak_session &
}
